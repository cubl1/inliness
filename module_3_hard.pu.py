from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import asyncio
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

api = 'ü§î'
bot = Bot(token=api)
dp = Dispatcher(bot, storage= MemoryStorage())

kb = ReplyKeyboardMarkup()
inform = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
calculate = KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
kb.add(inform)
kb.add(calculate)

ikc = InlineKeyboardMarkup()
button1 = InlineKeyboardButton(text = "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–ª–æ—Ä–∏–π", callback_data='calories')
button2 = InlineKeyboardButton(text= '–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data= 'formulas')
ikc.add(button1)
ikc.add(button2)
class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()

@dp.message_handler(commands='start')
async def start(message):
    print("–ù–∞–ø–µ—á–∞—Ç–∞–Ω /start")
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ—å—é.', reply_markup= ikc)

@dp.callback_query_handler(text='calories')
async def set_age(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await UserState.age.set()

@dp.message_handler(text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def all_massages(message):
    print(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    await message.answer('ü§î')

@dp.message_handler()
async def all_massages(message):
    print(f'–ù–∞–ø–µ—á–∞—Ç–∞–Ω {message.text}')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')

@dp.callback_query_handler(text='formulas')
async def get_formulas(call: types.CallbackQuery):
    await call.message.answer('10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) - 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5')
    await call.answer()

@dp.message_handler(state = UserState.age)
async def set_growth(message, state):
    await state.update_data(age = message.text)
    data = await state.get_data()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()

@dp.message_handler(state = UserState.growth)
async def set_growth(message, state):
    await state.update_data(growth = message.text)
    data = await state.get_data()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()

@dp.message_handler(state = UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight = message.text)
    data = await state.get_data()
    calories = 60 * int(data['weight']) + 6.25 * int(data['growth']) + 5 * int(data['age']) + 5
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π {calories}')
    await state.finish()
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
